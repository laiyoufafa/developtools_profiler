--- third_party/libunwind/BUILD.gn	2023-01-17 13:58:11.209820400 +0800
+++ prebuilts/patch_libunwind/libunwindbuild.gn	2023-01-17 11:02:37.478105100 +0800
@@ -11,13 +11,7 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-if (defined(ohos_lite)) {
-  import("//build/lite/config/component/lite_component.gni")
-} else {
-  import("//build/ohos.gni")
-  import("//third_party/libunwind/libunwind.gni")
-}
-
+import("//build/ohos.gni")
 common_source = [
   "src/dwarf/Gexpr.c",
   "src/dwarf/Gfde.c",
@@ -85,111 +79,116 @@ common_source = [
 
 # as libc++ is static linked with libunwind.a
 # we remove the Gstep.c for duplicated symbol violation
-arm_source = [
-  "src/arm/Gapply_reg_state.c",
-  "src/arm/Gcreate_addr_space.c",
-  "src/arm/Gex_tables.c",
-  "src/arm/Gget_proc_info.c",
-  "src/arm/Gget_save_loc.c",
-  "src/arm/Gglobal.c",
-  "src/arm/Ginit.c",
-  "src/arm/Ginit_local.c",
-  "src/arm/Ginit_remote.c",
-  "src/arm/Gos-linux.c",
-  "src/arm/Greg_states_iterate.c",
-  "src/arm/Gregs.c",
-  "src/arm/Gresume.c",
-  "src/arm/Gstash_frame.c",
-  "src/arm/Gstep.c",
-  "src/arm/Gtrace.c",
-  "src/arm/Lcreate_addr_space.c",
-  "src/arm/Lex_tables.c",
-  "src/arm/Lget_proc_info.c",
-  "src/arm/Lget_save_loc.c",
-  "src/arm/Lglobal.c",
-  "src/arm/Linit.c",
-  "src/arm/Linit_local.c",
-  "src/arm/Linit_remote.c",
-  "src/arm/Los-linux.c",
-  "src/arm/Lregs.c",
-  "src/arm/Lresume.c",
-  "src/arm/Lstash_frame.c",
-  "src/arm/Lstep.c",
-  "src/arm/Ltrace.c",
-  "src/arm/getcontext.S",
-  "src/arm/is_fpreg.c",
-  "src/arm/regname.c",
-  "src/arm/siglongjmp.S",
-  "src/elf32.c",
-]
-
-arm64_source = [
-  "src/aarch64/Gcreate_addr_space.c",
-  "src/aarch64/Gget_proc_info.c",
-  "src/aarch64/Gget_save_loc.c",
-  "src/aarch64/Gglobal.c",
-  "src/aarch64/Ginit.c",
-  "src/aarch64/Ginit_local.c",
-  "src/aarch64/Ginit_remote.c",
-  "src/aarch64/Gis_signal_frame.c",
-  "src/aarch64/Gregs.c",
-  "src/aarch64/Gresume.c",
-  "src/aarch64/Gstash_frame.c",
-  "src/aarch64/Gstep.c",
-  "src/aarch64/Gtrace.c",
-  "src/aarch64/Lcreate_addr_space.c",
-  "src/aarch64/Lget_proc_info.c",
-  "src/aarch64/Lget_save_loc.c",
-  "src/aarch64/Lglobal.c",
-  "src/aarch64/Linit.c",
-  "src/aarch64/Linit_local.c",
-  "src/aarch64/Linit_remote.c",
-  "src/aarch64/Lis_signal_frame.c",
-  "src/aarch64/Lregs.c",
-  "src/aarch64/Lresume.c",
-  "src/aarch64/Lstash_frame.c",
-  "src/aarch64/Lstep.c",
-  "src/aarch64/Ltrace.c",
-  "src/aarch64/getcontext.S",
-  "src/aarch64/is_fpreg.c",
-  "src/aarch64/regname.c",
-  "src/elf64.c",
-]
-
-x64_source = [
-  "src/elf64.c",
-  "src/x86_64/Gcreate_addr_space.c",
-  "src/x86_64/Gget_proc_info.c",
-  "src/x86_64/Gget_save_loc.c",
-  "src/x86_64/Gglobal.c",
-  "src/x86_64/Ginit.c",
-  "src/x86_64/Ginit_local.c",
-  "src/x86_64/Ginit_remote.c",
-  "src/x86_64/Gos-linux.c",
-  "src/x86_64/Gregs.c",
-  "src/x86_64/Gresume.c",
-  "src/x86_64/Gstash_frame.c",
-  "src/x86_64/Gstep.c",
-  "src/x86_64/Gtrace.c",
-  "src/x86_64/Lcreate_addr_space.c",
-  "src/x86_64/Lget_proc_info.c",
-  "src/x86_64/Lget_save_loc.c",
-  "src/x86_64/Lglobal.c",
-  "src/x86_64/Linit.c",
-  "src/x86_64/Linit_local.c",
-  "src/x86_64/Linit_remote.c",
-  "src/x86_64/Los-linux.c",
-  "src/x86_64/Lregs.c",
-  "src/x86_64/Lresume.c",
-  "src/x86_64/Lstash_frame.c",
-  "src/x86_64/Lstep.c",
-  "src/x86_64/Ltrace.c",
-  "src/x86_64/getcontext.S",
-  "src/x86_64/is_fpreg.c",
-  "src/x86_64/regname.c",
-  "src/x86_64/setcontext.S",
-]
+if (target_cpu == "arm") {
+  arm_source = [
+    "src/arm/Gapply_reg_state.c",
+    "src/arm/Gcreate_addr_space.c",
+    "src/arm/Gex_tables.c",
+    "src/arm/Gget_proc_info.c",
+    "src/arm/Gget_save_loc.c",
+    "src/arm/Gglobal.c",
+    "src/arm/Ginit.c",
+    "src/arm/Ginit_local.c",
+    "src/arm/Ginit_remote.c",
+    "src/arm/Gos-linux.c",
+    "src/arm/Greg_states_iterate.c",
+    "src/arm/Gregs.c",
+    "src/arm/Gresume.c",
+    "src/arm/Gstash_frame.c",
+    "src/arm/Gstep.c",
+    "src/arm/Gtrace.c",
+    "src/arm/Lcreate_addr_space.c",
+    "src/arm/Lex_tables.c",
+    "src/arm/Lget_proc_info.c",
+    "src/arm/Lget_save_loc.c",
+    "src/arm/Lglobal.c",
+    "src/arm/Linit.c",
+    "src/arm/Linit_local.c",
+    "src/arm/Linit_remote.c",
+    "src/arm/Los-linux.c",
+    "src/arm/Lregs.c",
+    "src/arm/Lresume.c",
+    "src/arm/Lstash_frame.c",
+    "src/arm/Lstep.c",
+    "src/arm/Ltrace.c",
+    "src/arm/gen-offsets.c",
+    "src/arm/getcontext.S",
+    "src/arm/is_fpreg.c",
+    "src/arm/regname.c",
+    "src/arm/siglongjmp.S",
+    "src/elf32.c",
+  ]
+}
+if (target_cpu == "arm64") {
+  arm64_source = [
+    "src/aarch64/Gcreate_addr_space.c",
+    "src/aarch64/Gget_proc_info.c",
+    "src/aarch64/Gget_save_loc.c",
+    "src/aarch64/Gglobal.c",
+    "src/aarch64/Ginit.c",
+    "src/aarch64/Ginit_local.c",
+    "src/aarch64/Ginit_remote.c",
+    "src/aarch64/Gis_signal_frame.c",
+    "src/aarch64/Gregs.c",
+    "src/aarch64/Gresume.c",
+    "src/aarch64/Gstash_frame.c",
+    "src/aarch64/Gstep.c",
+    "src/aarch64/Gtrace.c",
+    "src/aarch64/Lcreate_addr_space.c",
+    "src/aarch64/Lget_proc_info.c",
+    "src/aarch64/Lget_save_loc.c",
+    "src/aarch64/Lglobal.c",
+    "src/aarch64/Linit.c",
+    "src/aarch64/Linit_local.c",
+    "src/aarch64/Linit_remote.c",
+    "src/aarch64/Lis_signal_frame.c",
+    "src/aarch64/Lregs.c",
+    "src/aarch64/Lresume.c",
+    "src/aarch64/Lstash_frame.c",
+    "src/aarch64/Lstep.c",
+    "src/aarch64/Ltrace.c",
+    "src/aarch64/getcontext.S",
+    "src/aarch64/is_fpreg.c",
+    "src/aarch64/regname.c",
+    "src/elf64.c",
+  ]
+}
 
+if (target_cpu == "x64") {
+  x64_source = [
+    "src/elf64.c",
+    "src/x86_64/Gcreate_addr_space.c",
+    "src/x86_64/Gget_proc_info.c",
+    "src/x86_64/Gget_save_loc.c",
+    "src/x86_64/Gglobal.c",
+    "src/x86_64/Ginit.c",
+    "src/x86_64/Ginit_local.c",
+    "src/x86_64/Ginit_remote.c",
+    "src/x86_64/Gos-linux.c",
+    "src/x86_64/Gregs.c",
+    "src/x86_64/Gresume.c",
+    "src/x86_64/Gstash_frame.c",
+    "src/x86_64/Gstep.c",
+    "src/x86_64/Gtrace.c",
+    "src/x86_64/Lcreate_addr_space.c",
+    "src/x86_64/Lget_proc_info.c",
+    "src/x86_64/Lget_save_loc.c",
+    "src/x86_64/Lglobal.c",
+    "src/x86_64/Linit.c",
+    "src/x86_64/Linit_local.c",
+    "src/x86_64/Linit_remote.c",
+    "src/x86_64/Los-linux.c",
+    "src/x86_64/Lregs.c",
+    "src/x86_64/Lresume.c",
+    "src/x86_64/Lstash_frame.c",
+    "src/x86_64/Lstep.c",
+    "src/x86_64/Ltrace.c",
+    "src/x86_64/getcontext.S",
+    "src/x86_64/is_fpreg.c",
+    "src/x86_64/regname.c",
+    "src/x86_64/setcontext.S",
+  ]
+}
 remove_sources = []
 
 ptrace_sources = [
@@ -255,7 +254,8 @@ config("unwind_config_public") {
   cflags = [
     "-D_GNU_SOURCE",
     "-DHAVE_CONFIG_H",
-    "-DNDEBUG",
+
+    # "-DNDEBUG",
     "-DCC_IS_CLANG",
     "-fcommon",
     "-Werror",
@@ -263,9 +263,32 @@ config("unwind_config_public") {
     "-Wno-header-guard",
     "-Wno-unused-parameter",
     "-Wno-unused-variable",
-    "-Wno-int-to-pointer-cast",
-    "-Wno-pointer-to-int-cast",
+    "-Wno-unused-result",
+    "-Wno-tautological-constant-out-of-range-compare",
   ]
+  if (use_wasm) {
+    cflags += [ "-Wno-incompatible-pointer-types" ]
+  }
+  if (is_mingw) {
+    cflags += [
+      "-Wno-attributes",
+      "-Wno-pointer-to-int-cast",
+      "-Wno-implicit-function-declaration",
+
+      # "-Wno-absolute-value",
+      # "-Wno-header-guard",
+      # "-Wno-tautological-constant-out-of-range-compare",
+      # "-Wno-sometimes-uninitialized",
+      # "-Wno-int-to-void-pointer-cast",
+    ]
+  }
+
+  if (use_wasm) {
+    cflags += [
+      # "-D __mips__"
+      # "-D WASM",
+    ]
+  }
 
   if (defined(ohos_lite)) {
     cflags += [ "-fPIC" ]
@@ -282,18 +305,14 @@ config("unwind_config_public") {
   } else if (target_cpu == "arm64") {
     include_dirs += [ "include/tdep-aarch64" ]
     cflags += [ "-Wno-incompatible-pointer-types" ]
-  } else if (target_cpu == "x64" || target_cpu == "x86_64") {
+  } else if (target_cpu == "x64") {
     include_dirs += [ "include/tdep-x86_64" ]
-  } else if (target_cpu == "mipsel") {
-    include_dirs += [ "include/tdep-mips" ]
   }
 }
-
 config("unwind_config_remote") {
   cflags =
       [ "-Wno-format" ]  # some debug feature will warning in host x64 build
 }
-
 config("unwind_config_remote_public") {
   cflags = []
   include_dirs = []
@@ -320,9 +339,10 @@ config("unwind_config_remote_public") {
 
   defines += [ "build_remote=1" ]
   defines += [ "target_cpu=${target_cpu}" ]
-  defines += [ "host_toolchain=${host_toolchain}" ]
-  defines += [ "current_toolchain=${current_toolchain}" ]
-  defines += [ "default_toolchain=${default_toolchain}" ]
+
+  # defines += [ "host_toolchain=${host_toolchain}" ]
+  # defines += [ "current_toolchain=${current_toolchain}" ]
+  # defines += [ "default_toolchain=${default_toolchain}" ]
 }
 
 config("unwind_config_arm") {
@@ -337,14 +357,8 @@ config("unwind_config_x64") {
   defines = [ "UNW_TARGET_X86_64" ]
   defines += [ "UNW_TARGET_X86_64_LINUX" ]
 }
-
-config("unwind_config_x86_64") {
-  defines = [ "UNW_TARGET_X86_64" ]
-  defines += [ "UNW_TARGET_X86_64_LINUX" ]
-}
-
-if (defined(ohos_lite)) {
-  source_set("unwind_source_arm") {
+if (target_cpu == "arm") {
+  ohos_source_set("unwind_source_arm") {
     configs += [ ":unwind_config_remote" ]
     public_configs = [
       ":unwind_config_public",
@@ -353,6 +367,10 @@ if (defined(ohos_lite)) {
     ]
     sources = common_source
 
+    # there is a main function in this file
+    # for a lib we dont need this
+    arm_source -= [ "src/arm/gen-offsets.c" ]
+
     # no jump lib
     arm_source -= [
       "src/arm/getcontext.S",
@@ -361,8 +379,9 @@ if (defined(ohos_lite)) {
     sources += arm_source
     sources -= remove_sources
   }
-
-  source_set("unwind_source_arm64") {
+}
+if (target_cpu == "arm64") {
+  ohos_source_set("unwind_source_arm64") {
     configs += [ ":unwind_config_remote" ]
     public_configs = [
       ":unwind_config_public",
@@ -376,8 +395,9 @@ if (defined(ohos_lite)) {
     sources += arm64_source
     sources -= remove_sources
   }
-
-  source_set("unwind_source_x64") {
+}
+if (target_cpu == "x86") {
+  ohos_source_set("unwind_source_x64") {
     configs += [ ":unwind_config_remote" ]
     public_configs = [
       ":unwind_config_public",
@@ -394,460 +414,51 @@ if (defined(ohos_lite)) {
     sources += x64_source
     sources -= remove_sources
   }
-
-  source_set("unwind_source") {
-    configs += [ ":unwind_config_public" ]
-    sources = common_source
-
-    if (target_cpu == "arm") {
-      # no jump lib
-      arm_source -= [
-        "src/arm/getcontext.S",
-        "src/arm/siglongjmp.S",
-      ]
-
-      # as libc++ is static linked with libunwind.a
-      # we remove the Gstep.c for duplicated symbol violation
-      sources += arm_source
-      public_configs = [ ":unwind_config_arm" ]
-    } else if (target_cpu == "arm64") {
-      sources += arm64_source
-      public_configs = [ ":unwind_config_arm64" ]
-    } else if (target_cpu == "x64") {
-      sources += x64_source
-      public_configs = [ ":unwind_config_x64" ]
-    } else if (target_cpu == "x86_64") {
-      sources += x64_source
-      public_configs = [ ":unwind_config_x86_64" ]
-    }
-
-    sources += [ "src/os-ohos.c" ]
-  }
-
-  shared_library("libunwind") {
-    deps = [ ":unwind_source" ]
-    public_configs = [ ":unwind_config_public" ]
-  }
-} else {
-  ohos_source_set("unwind_source_arm") {
-    configs = [ ":unwind_config_remote" ]
-    public_configs = [
-      ":unwind_config_public",
-      ":unwind_config_remote_public",
-      ":unwind_config_arm",
-    ]
-    sources = common_source
-
-    # no jump lib
-    arm_source -= [
-      "src/arm/getcontext.S",
-      "src/arm/siglongjmp.S",
-    ]
+}
+ohos_source_set("unwind_source") {
+  configs += [ ":unwind_config_public" ]
+  sources = common_source
+  if (target_cpu == "arm") {
+    # as libc++ is static linked with libunwind.a
+    # we remove the Gstep.c for duplicated symbol violation
     sources += arm_source
-    sources -= remove_sources
-  }
-
-  ohos_source_set("unwind_source_arm64") {
-    configs = [ ":unwind_config_remote" ]
-    public_configs = [
-      ":unwind_config_public",
-      ":unwind_config_remote_public",
-      ":unwind_config_arm64",
-    ]
-    sources = common_source
-
-    arm64_source -= [ "src/aarch64/getcontext.S" ]
-
+    public_configs = [ ":unwind_config_arm" ]
+  } else if (target_cpu == "arm64") {
     sources += arm64_source
-    sources -= remove_sources
-  }
-
-  ohos_source_set("unwind_source_x64") {
-    configs = [ ":unwind_config_remote" ]
-    public_configs = [
-      ":unwind_config_public",
-      ":unwind_config_remote_public",
-      ":unwind_config_x64",
-    ]
-    sources = common_source
-
-    # no jump lib
-    x64_source -= [
-      "src/x86_64/getcontext.S",
-      "src/x86_64/setcontext.S",
-    ]
+    public_configs = [ ":unwind_config_arm64" ]
+  } else if (target_cpu == "x64") {
+    # deps = [ "unwind_source_x64" ]
     sources += x64_source
-    sources -= remove_sources
-  }
-
-  ohos_source_set("unwind_source_x86_64") {
-    configs = [ ":unwind_config_remote" ]
-    public_configs = [
-      ":unwind_config_public",
-      ":unwind_config_remote_public",
-      ":unwind_config_x86_64",
-    ]
-    sources = common_source
+    public_configs = [ ":unwind_config_x64" ]
 
-    # no jump lib
-    x64_source -= [
-      "src/x86_64/getcontext.S",
-      "src/x86_64/setcontext.S",
-    ]
-    sources += x64_source
-    sources -= remove_sources
+    # public_configs = [
+    # ":unwind_config_public",
+    # ":unwind_config_remote_public",
+    # ":unwind_config_x64",
+    # ]
   }
 
-  ohos_source_set("unwind_source") {
-    configs = [ ":unwind_config_public" ]
-    sources = common_source
-
-    if (target_cpu == "arm") {
-      # as libc++ is static linked with libunwind.a
-      # we remove the Gstep.c for duplicated symbol violation
-      sources += arm_source
-      public_configs = [ ":unwind_config_arm" ]
-    } else if (target_cpu == "arm64") {
-      sources += arm64_source
-      public_configs = [ ":unwind_config_arm64" ]
-    } else if (target_cpu == "x64") {
-      sources += x64_source
-      public_configs = [ ":unwind_config_x64" ]
-    } else if (target_cpu == "x86_64") {
-      sources += x64_source
-      public_configs = [ ":unwind_config_x86_64" ]
-    }
-
-    sources += [ "src/os-ohos.c" ]
-    cflags = [
-      "-DHAS_ARK_FRAME",
-      "-DPARSE_BUILD_ID",
-      "-DIS_VALIDATE_MEM",
-    ]
-  }
+  sources += [ "src/os-ohos.c" ]
+}
 
-  ohos_shared_library("libunwind") {
+if (defined(ohos_lite)) {
+  # shared_library("libunwind") {
+  source_set("libunwind") {
     deps = [ ":unwind_source" ]
-    install_images = [
-      "system",
-      "updater",
-    ]
     public_configs = [ ":unwind_config_public" ]
-    part_name = "faultloggerd"
-    subsystem_name = "hiviewdfx"
-  }
-
-  config("unwind_config_local_only") {
-    defines = [ "UNW_LOCAL_ONLY" ]
   }
+} else {
+  # ohos_shared_library("libunwind") {
+  source_set("libunwind") {
+    deps = [ ":unwind_source" ]
 
-  ohos_static_library("libunwind_local") {
-    sources = common_source
+    # install_images = [
+    # "system",
+    # "updater",
+    # ]
     public_configs = [ ":unwind_config_public" ]
-    public_configs += [ ":unwind_config_local_only" ]
-
-    if (target_cpu == "arm") {
-      sources += arm_source
-      sources -= arm_source_local
-      public_configs += [ ":unwind_config_arm" ]
-    } else if (target_cpu == "arm64") {
-      sources += arm64_source
-      sources -= arm64_source_local
-      public_configs += [ ":unwind_config_arm64" ]
-    } else if (target_cpu == "x64") {
-      sources += x64_source
-      sources -= x64_source_local
-      public_configs += [ ":unwind_config_x64" ]
-    } else if (target_cpu == "x86_64") {
-      sources += x64_source
-      sources -= x64_source_local
-      public_configs += [ ":unwind_config_x86_64" ]
-    }
-
-    sources += [ "src/os-ohos.c" ]
-    sources -= libunwind_dwarf_local_la_SOURCES
-    sources -= libunwind_la_SOURCES_local
-    sources -= ptrace_sources
-
-    cflags = [
-      "-DHAS_ARK_FRAME",
-      "-DPARSE_BUILD_ID",
-      "-DIS_VALIDATE_MEM",
-      "-DUNW_LOCAL_ONLY",
-      "-DNO_RESERVE_CACHE",
-    ]
-
-    part_name = "faultloggerd"
-    subsystem_name = "hiviewdfx"
-  }
-}
 
-if (!defined(ohos_lite)) {
-  import("//build/test.gni")
-  module_output_path = "hiviewdfx/faultloggerd"
-  group("unittest") {
-    testonly = true
-    deps = [
-      ":Gtest_bt",
-      ":Gtest_dyn1",
-      ":Gtest_init",
-      ":Gtest_trace",
-      ":Ltest_bt",
-      ":Ltest_cxx_exceptions",
-      ":Ltest_dyn1",
-      ":Ltest_init",
-      ":Ltest_init_local_signal",
-      ":Ltest_mem_validate",
-      ":Ltest_nocalloc",
-      ":Ltest_nomalloc",
-      ":Ltest_trace",
-      ":test_ptrace_misc",
-      ":test_static_link",
-    ]
-  }
-  config("unwind_test") {
-    cflags = [ "-O0" ]
-  }
-
-  ohos_unittest("Gtest_init") {
-    module_out_path = module_output_path
-    sources = [ "tests/Gtest-init.cxx" ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_init") {
-    module_out_path = module_output_path
-    sources = [ "tests/Ltest-init.cxx" ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_cxx_exceptions") {
-    module_out_path = module_output_path
-    sources = [ "tests/Ltest-cxx-exceptions.cxx" ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    cflags = [ "-fexceptions" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-    remove_configs = [ "//build/config/compiler:no_exceptions" ]
-  }
-
-  ohos_unittest("Ltest_init_local_signal") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/Ltest-init-local-signal-lib.c",
-      "tests/Ltest-init-local-signal.c",
-    ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Gtest_dyn1") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/Gtest-dyn1.c",
-      "tests/flush-cache.h",
-    ]
-    if (target_cpu == "arm") {
-      sources += [ "tests/flush-cache.S" ]
-    }
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    cflags = [ "-DHAVE__BUILTIN___CLEAR_CACHE" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_dyn1") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/Ltest-dyn1.c",
-      "tests/flush-cache.h",
-    ]
-    if (target_cpu == "arm") {
-      sources += [ "tests/flush-cache.S" ]
-    }
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    cflags = [ "-DHAVE__BUILTIN___CLEAR_CACHE" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("test_static_link") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/test-static-link-gen.c",
-      "tests/test-static-link-loc.c",
-    ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Gtest_bt") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/Gtest-bt.c",
-      "tests/dummy_backtrace.c",
-      "tests/ident.c",
-    ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_bt") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/Ltest-bt.c",
-      "tests/dummy_backtrace.c",
-      "tests/ident.c",
-    ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("test_ptrace_misc") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/ident.c",
-      "tests/test-ptrace-misc.c",
-    ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_nomalloc") {
-    module_out_path = module_output_path
-    sources = [ "tests/Ltest-nomalloc.c" ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_nocalloc") {
-    module_out_path = module_output_path
-    sources = [ "tests/Ltest-nocalloc.c" ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Gtest_trace") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/Gtest-trace.c",
-      "tests/dummy_backtrace.c",
-      "tests/ident.c",
-    ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_trace") {
-    module_out_path = module_output_path
-    sources = [
-      "tests/Ltest-trace.c",
-      "tests/dummy_backtrace.c",
-      "tests/ident.c",
-    ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-
-  ohos_unittest("Ltest_mem_validate") {
-    module_out_path = module_output_path
-    sources = [ "tests/Ltest-mem-validate.c" ]
-    include_dirs = [
-      "tests",
-      "include",
-    ]
-    configs = [ ":unwind_test" ]
-    deps = [ ":libunwind" ]
-    subsystem_name = "hiviewdfx"
-    part_name = "faultloggerd"
-  }
-} else {
-  group("unittest") {
-    testonly = true
-    deps = []
+    # part_name = "faultloggerd"
+    # subsystem_name = "hiviewdfx"
   }
 }
