# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("ts.gni")
ohos_source_set("trace_streamer_source") {
  sources = [
    "cfg/trace_streamer_cfg.cpp",
    "cfg/trace_streamer_cfg.h",
    "filter/args_filter.cpp",
    "filter/args_filter.h",
    "filter/binder_filter.cpp",
    "filter/binder_filter.h",
    "filter/clock_filter.cpp",
    "filter/clock_filter.h",
    "filter/cpu_filter.cpp",
    "filter/filter_base.cpp",
    "filter/filter_base.h",
    "filter/filter_filter.cpp",
    "filter/filter_filter.h",
    "filter/irq_filter.cpp",
    "filter/irq_filter.h",
    "filter/measure_filter.cpp",
    "filter/measure_filter.h",
    "filter/process_filter.cpp",
    "filter/process_filter.h",
    "filter/slice_filter.cpp",
    "filter/slice_filter.h",
    "filter/stat_filter.cpp",
    "filter/stat_filter.h",
    "filter/symbols_filter.cpp",
    "filter/symbols_filter.h",
    "filter/system_event_measure_filter.cpp",
    "filter/system_event_measure_filter.h",
    "parser/bytrace_parser/bytrace_event_parser.cpp",
    "parser/bytrace_parser/bytrace_event_parser.h",
    "parser/bytrace_parser/bytrace_parser.cpp",
    "parser/bytrace_parser/bytrace_parser.h",
    "parser/common_types.h",
    "parser/event_parser_base.cpp",
    "parser/event_parser_base.h",
    "parser/print_event_parser.cpp",
    "parser/print_event_parser.h",
    "parser/thread_state.cpp",
    "parser/thread_state.h",
    "table/args_table.cpp",
    "table/args_table.h",
    "table/callstack_table.cpp",
    "table/callstack_table.h",
    "table/clk_event_filter_table.cpp",
    "table/clk_event_filter_table.h",
    "table/clock_event_filter_table.cpp",
    "table/clock_event_filter_table.h",
    "table/cpu_measure_filter_table.cpp",
    "table/cpu_measure_filter_table.h",
    "table/data_dict_table.cpp",
    "table/data_dict_table.h",
    "table/data_type_table.cpp",
    "table/data_type_table.h",
    "table/filter_table.cpp",
    "table/filter_table.h",
    "table/instants_table.cpp",
    "table/instants_table.h",
    "table/log_table.cpp",
    "table/log_table.h",
    "table/measure_filter_table.cpp",
    "table/measure_filter_table.h",
    "table/measure_table.cpp",
    "table/measure_table.h",
    "table/meta_table.cpp",
    "table/meta_table.h",
    "table/process_filter_table.cpp",
    "table/process_filter_table.h",
    "table/process_measure_filter_table.cpp",
    "table/process_measure_filter_table.h",
    "table/process_table.cpp",
    "table/process_table.h",
    "table/range_table.cpp",
    "table/raw_table.cpp",
    "table/raw_table.h",
    "table/sched_slice_table.cpp",
    "table/sched_slice_table.h",
    "table/stat_table.cpp",
    "table/stat_table.h",
    "table/symbols_table.cpp",
    "table/symbols_table.h",
    "table/system_call_table.cpp",
    "table/system_call_table.h",
    "table/system_event_filter_table.cpp",
    "table/system_event_filter_table.h",
    "table/table_base.cpp",
    "table/table_base.h",
    "table/thread_filter_table.cpp",
    "table/thread_filter_table.h",
    "table/thread_state_table.cpp",
    "table/thread_state_table.h",
    "table/thread_table.cpp",
    "trace_data/trace_data_cache.cpp",
    "trace_data/trace_data_cache.h",
    "trace_data/trace_data_cache_base.cpp",
    "trace_data/trace_data_cache_base.h",
    "trace_data/trace_data_cache_reader.cpp",
    "trace_data/trace_data_cache_reader.h",
    "trace_data/trace_data_cache_writer.cpp",
    "trace_data/trace_data_cache_writer.h",
    "trace_data/trace_data_db.cpp",
    "trace_data/trace_data_db.h",
    "trace_data/trace_stdtype.cpp",
    "trace_data/trace_stdtype.h",
    "trace_streamer/trace_streamer_filters.cpp",
    "trace_streamer/trace_streamer_filters.h",
    "trace_streamer/trace_streamer_selector.cpp",
    "trace_streamer/trace_streamer_selector.h",
  ]
  include_dirs = [
    "base",
    "..",
    "trace_streamer",
    "filter",
    "table",
    "trace_data",
    "include",
    "./",
    "parser",
    "cfg",
    "parser/htrace_parser",
    "parser/htrace_parser/htrace_event_parser",
    "parser/htrace_parser/htrace_cpu_parser",
    "//third_party/sqlite/include",
    "${OHOS_PROTO_GEN}/types/plugins/memory_data",
    "${OHOS_PROTO_GEN}/types/plugins/ftrace_data",
    "${OHOS_PROTO_GEN}",
    "//third_party/protobuf/src",
  ]
  deps = [
    "base",
    "parser/htrace_parser:htrace_parser",
  ]

  if (enable_ts_utest) {
    cflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
    ]
    ldflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
      "--coverage",
    ]
  }
  public_deps = []
}

executable("trace_streamer") {
  include_dirs = [
    "./",
    "include",
    "trace_data",
    "cfg",
    "trace_streamer",
    "parser",
    "cfg",
    "parser/htrace_parser",
    "parser/htrace_parser/htrace_event_parser",
    "parser/htrace_parser/htrace_cpu_parser",
    "//third_party/sqlite/include",
    "${OHOS_PROTO_GEN}/types/plugins/memory_data",
    "${OHOS_PROTO_GEN}/types/plugins/ftrace_data",
    "${OHOS_PROTO_GEN}",
    "//third_party/protobuf/src",
    "base",
  ]
  deps = [
    ":trace_streamer_source",
    "base",
    "include:ibase",
    "//third_party/sqlite:sqlite",
  ]
  sources = [ "main.cpp" ]
}
