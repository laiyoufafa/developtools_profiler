# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../device/base/config.gni")
import("test_ts.gni")

module_output_path = "${OHOS_PROFILER_TEST_MODULE_OUTPUT_PATH}/trace_analyzer"
config("module_private_config") {
  visibility = [ ":*" ]
  if (current_toolchain != host_toolchain) {
    defines = [ "HAVE_HILOG" ]
  }
}

ohos_unittest("hiprofiler_ts_ut") {
  module_out_path = module_output_path
  sources = [
    "unittest/binder_filter_test.cpp",
    "unittest/bytrace_parser_test.cpp",
    "unittest/clock_filter_test.cpp",
    "unittest/cpu_filter_test.cpp",
    "unittest/event_parser_test.cpp",
    "unittest/filter_filter_test.cpp",
    "unittest/hilog_parser_test.cpp",
    "unittest/htrace_binder_event_test.cpp",
    "unittest/htrace_event_parser_test.cpp",
    "unittest/htrace_irq_event_test.cpp",
    "unittest/htrace_mem_parser_test.cpp",
    "unittest/htrace_sys_mem_parser_test.cpp",
    "unittest/htrace_sys_vmem_parser_test.cpp",
    "unittest/irq_filter_test.cpp",
    "unittest/measure_filter_test.cpp",
    "unittest/parser_test.cpp",
    "unittest/process_filter_test.cpp",
    "unittest/slice_filter_test.cpp",
  ]
  deps = [
    "${OHOS_FTRACE_PROTO_DIR}:ftrace_data_cpp",
    "${OHOS_MEMORY_PROTO_DIR}:memory_data_cpp",
    "${OHOS_SERVICE_PROTO_DIR}:proto_services_cpp",
    "../src:trace_streamer_source",
    "//third_party/bounds_checking_function:libsec_static",
    "//third_party/googletest:gtest_main",
    "//third_party/protobuf:protobuf",
    "//third_party/protobuf:protobuf_lite",
    "//third_party/sqlite:sqlite",
  ]
  include_dirs = [
    "../src",
    "../src/trace_data",
    "../src/table",
    "../src/filter",
    "../src/base",
    "../src/include",
    "../src/trace_streamer",
    "../src/parser/bytrace_parser",
    "../src/parser",
    "../src/cfg",
    "../src/parser/htrace_parser",
    "../src/parser/htrace_parser/htrace_event_parser",
    "../src/parser/htrace_parser/htrace_cpu_parser",
    "..",
    "//third_party/googletest/googletest/include/gtest",
    "//utils/native/base/include",
    "//third_party/bounds_checking_function/include",
    "//third_party/protobuf/src",
    "${OHOS_PROTO_GEN}",
  ]
  cflags = [
    "-Wno-inconsistent-missing-override",
    "-Dprivate=public",  #allow test code access private members
    "-fprofile-arcs",
    "-ftest-coverage",
    "-Wno-unused-command-line-argument",
    "-Wno-format",
    "-Wno-unused-const-variable",
    "-Wno-unused-variable",
  ]
  ldflags = [
    "-fprofile-arcs",
    "-ftest-coverage",
    "--coverage",
  ]
  external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  public_configs = [ "${OHOS_PROFILER_DIR}/device/base:hiprofiler_test_config" ]
  configs = [ ":module_private_config" ]
  subsystem_name = "${OHOS_PROFILER_SUBSYS_NAME}"
}

group("unittest") {
  testonly = true
  deps = [ ":hiprofiler_ts_ut" ]
}
group("fuzztest") {
  testonly = true
  deps = [
    "test_fuzzer/bytrace_fuzzer:fuzztest",
    "test_fuzzer/htrace_fuzzer:fuzztest",
    "test_fuzzer/selector_fuzzer:fuzztest",
  ]
}
